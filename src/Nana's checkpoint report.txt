Each separate group member has their own arm11 git repository where they store their code. The two sub groups working on emulate and assembler consistently fetch from their partner’s repository to ensure their sub group is up to date. Once the emulator and assembler are complete, each member’s repository will be merged with the team leader’s repository to ensure all files are in one place. 

Each member communicates frequently with their partner to ensure everyone understands how their part works and what they need to do to ensure their code can merge with their partner’s seamlessly.  Each member occasionally scans their partner’s code to critique their style choices. This helps improve the readability of code and helps the style between each member’s code stay consistent. The group as a whole also has regular meetings to ensure each sub group is clear on what they have to do and also to discuss deadlines for tasks we must complete.

Once emulate and assembler are complete, two members from each sub group will swap. Now each sub group we contain one person who programmed the assembler and another who programmed the emulator. During this stage, the sub groups now discuss their implementation of their part of the project to their partner. This ensures everyone understands exactly how the group implemented each stage of the emulator and assembler. During this stage each sub group can discuss improvements and concerns for the implementation of part 3 and 4 as they will have an understanding of part 1 and part 2.

Splitting the group in two proved to be a very effective solution to working with a lot of work at a reasonable speed. If we had worked on emulate as one group, everyone would have had less work to do but bottleneck problems will likely occur where two or three people may be relying on code from one or more members. This may slow down the coding process as members may not be able to debug efficiently without another member’s code. As there is only two members working on emulator, both members only had to rely on one other member when it comes to merging code. Even though each member had more work to do, there was less members to think about when coding so merging code was fairly straight forward. This significantly reduced any bottleneck effect that may have occurred.
Despite the success of splitting the group in two for the emulator and assembler, our group will approach the implementation of part 3 and part 4 as a whole. This is due to the fact that these two parts are more demanding, thus working together is a much safer option as there will be more members to assist each other. Also there is only one Raspberry Pi thus it will be difficult to have two groups working with it at once.
